// src/middleware.ts - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –° AUTH-STORAGE

import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { UserRole } from "@/types";

export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;

  console.log(`üõ°Ô∏è Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ ${path}`);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
  if (
    path.startsWith("/_next/") ||
    path.startsWith("/api/") ||
    path.startsWith("/favicon.ico") ||
    path.startsWith("/public/") ||
    path.includes(".")
  ) {
    return NextResponse.next();
  }

  // –ü–æ–ª—É—á–∞–µ–º auth-storage cookie
  const authSession = request.cookies.get("auth-storage");
  let user = null;

  console.log("üç™ Auth-storage cookie:", authSession ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω");

  if (authSession) {
    try {
      const parsed = JSON.parse(decodeURIComponent(authSession.value));
      user = parsed.state?.user;
      console.log(
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ cookie:",
        user
          ? {
              id: user.$id,
              name: user.name,
              email: user.email,
              role: user.role,
              isActive: user.isActive,
            }
          : "null"
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ auth-storage:", error);
    }
  }

  const isAuthenticated = !!user && user.$id && user.email && user.role;
  const isActive = user?.isActive === true;

  console.log(`üîç –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, {
    isAuthenticated,
    isActive,
    userRole: user?.role || "–Ω–µ—Ç —Ä–æ–ª–∏",
  });

  // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
  const publicPaths = ["/", "/events", "/search"];
  const isPublicPath =
    publicPaths.includes(path) || path.startsWith("/events/");

  if (isPublicPath) {
    console.log("üåê –ü—É–±–ª–∏—á–Ω—ã–π –ø—É—Ç—å, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω");
    return NextResponse.next();
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ª–æ–≥–∏–Ω –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  if (path.startsWith("/login") || path.startsWith("/register")) {
    if (isAuthenticated && isActive) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("üìù –î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    return NextResponse.next();
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
  if (!isAuthenticated || !isActive) {
    console.log(
      "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login"
    );
    const loginUrl = new URL("/login", request.url);
    loginUrl.searchParams.set("redirect", path);
    return NextResponse.redirect(loginUrl);
  }

  // –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ —Ä–æ–ª—è–º
  if (path.startsWith("/admin") && user.role !== UserRole.ADMIN) {
    console.log("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /admin, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
    return redirectByRole(user.role, request);
  }

  if (
    path.startsWith("/organizer") &&
    ![UserRole.ADMIN, UserRole.ORGANIZER].includes(user.role)
  ) {
    console.log("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /organizer, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
    return redirectByRole(user.role, request);
  }

  // –ü—Ä–æ—Ñ–∏–ª—å –∏ –ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  if (
    path.startsWith("/profile") ||
    path.startsWith("/favorites") ||
    path.startsWith("/my-events")
  ) {
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω");
    return NextResponse.next();
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ—Ä–Ω—è
  if (path === "/") {
    console.log("üè† –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —Ä–æ–ª–∏");
    return redirectByRole(user.role, request);
  }

  console.log("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω");
  return NextResponse.next();
}

function redirectByRole(role: UserRole, request: NextRequest) {
  let targetPath: string;

  switch (role) {
    case UserRole.ADMIN:
      targetPath = "/admin";
      console.log("üëë –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ADMIN –Ω–∞ /admin");
      break;
    case UserRole.ORGANIZER:
      targetPath = "/organizer";
      console.log("üìã –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ORGANIZER –Ω–∞ /organizer");
      break;
    case UserRole.USER:
      targetPath = "/";
      console.log("üéì –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ USER –Ω–∞ /");
      break;
    default:
      targetPath = "/login";
      console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login");
  }

  const url = new URL(targetPath, request.url);
  console.log(
    `üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç: ${request.nextUrl.pathname} ‚Üí ${targetPath}`
  );
  return NextResponse.redirect(url);
}

export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|public|favicon.ico).*)",
    "/admin/:path*",
    "/organizer/:path*",
    "/profile/:path*",
    "/favorites/:path*",
    "/my-events/:path*",
    "/login",
    "/register",
    "/",
  ],
};
