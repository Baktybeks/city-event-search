// src/hooks/useAuth.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° ZUSTAND

import { useAuthStore } from "@/store/authStore";
import { useSyncAuthCookie } from "./useSyncAuthCookie";
import {
  useCurrentUser,
  useLogin as useAppwriteLogin,
  useLogout as useAppwriteLogout,
  useRegister as useAppwriteRegister,
  useUpdateCurrentUser as useAppwriteUpdateCurrentUser,
} from "@/services/authService";
import { UserRole, User } from "@/types";
import { useEffect } from "react";

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type AuthenticatedUser = User & { id: string; name: string; role: UserRole };
type NotActivatedUser = { notActivated: true };

// Type guards –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
function isAuthenticatedUser(user: any): user is AuthenticatedUser {
  return (
    user &&
    typeof user === "object" &&
    "$id" in user &&
    "name" in user &&
    "role" in user &&
    "isActive" in user &&
    user.isActive === true &&
    !("notActivated" in user)
  );
}

function isNotActivatedUser(user: any): user is NotActivatedUser {
  return user && typeof user === "object" && "notActivated" in user;
}

export function useAuth() {
  // Zustand store
  const {
    user: storeUser,
    setUser,
    clearUser,
    updateUser,
    setLoading,
  } = useAuthStore();

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å cookies –¥–ª—è middleware
  useSyncAuthCookie();

  // React Query –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
  const {
    data: queryUser,
    isLoading: queryLoading,
    error: queryError,
    refetch,
  } = useCurrentUser();

  const loginMutation = useAppwriteLogin();
  const logoutMutation = useAppwriteLogout();
  const registerMutation = useAppwriteRegister();
  const updateUserMutation = useAppwriteUpdateCurrentUser();

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É React Query –∏ Zustand
  useEffect(() => {
    if (queryUser && isAuthenticatedUser(queryUser)) {
      // –ï—Å–ª–∏ –≤ React Query –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º store
      if (!storeUser || storeUser.$id !== queryUser.$id) {
        console.log(
          "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º store –∏–∑ React Query:",
          queryUser.name
        );
        setUser(queryUser);
      }
    } else if (queryUser === null && storeUser) {
      // –ï—Å–ª–∏ React Query –≤–µ—Ä–Ω—É–ª null, –Ω–æ –≤ store –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—á–∏—â–∞–µ–º store
      console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—á–∏—â–∞–µ–º store (React Query –≤–µ—Ä–Ω—É–ª null)");
      clearUser();
    }
  }, [queryUser, storeUser, setUser, clearUser]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const user = storeUser;
  const isAuthenticated = isAuthenticatedUser(user);
  const isNotActivated = queryUser ? isNotActivatedUser(queryUser) : false;
  const loading =
    queryLoading ||
    loginMutation.isPending ||
    logoutMutation.isPending ||
    registerMutation.isPending ||
    updateUserMutation.isPending;

  const userWithId = isAuthenticated
    ? {
        ...user,
        id: user.$id,
      }
    : null;

  const login = async (email: string, password: string): Promise<User> => {
    try {
      console.log("üîê useAuth: –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω...");
      setLoading(true);

      const result = await loginMutation.mutateAsync({ email, password });
      console.log("‚úÖ useAuth: –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º store:", result.name);

      // –û–±–Ω–æ–≤–ª—è–µ–º store —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
      setUser(result);

      return result;
    } catch (error) {
      console.error("‚ùå useAuth: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:", error);
      setLoading(false);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const register = async (
    name: string,
    email: string,
    password: string,
    role: UserRole
  ): Promise<User> => {
    try {
      console.log("üìù useAuth: –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...");
      setLoading(true);

      const result = await registerMutation.mutateAsync({
        name,
        email,
        password,
        role,
      });
      console.log("‚úÖ useAuth: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", result.name);

      // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º store –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      // (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)

      return result;
    } catch (error) {
      console.error("‚ùå useAuth: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const updateUserData = async (data: Partial<User>): Promise<User> => {
    try {
      console.log("üîÑ useAuth: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");

      const result = await updateUserMutation.mutateAsync(data);
      console.log("‚úÖ useAuth: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

      // –û–±–Ω–æ–≤–ª—è–µ–º store
      updateUser(data);

      return result;
    } catch (error) {
      console.error("‚ùå useAuth: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
      throw error;
    }
  };

  const logout = async (): Promise<void> => {
    try {
      console.log("üö™ useAuth: –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã...");
      setLoading(true);

      await logoutMutation.mutateAsync();
      console.log("‚úÖ useAuth: –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –æ—á–∏—â–∞–µ–º store");

      // –û—á–∏—â–∞–µ–º store (—á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç cookie)
      clearUser();

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log("üè† useAuth: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É");
      window.location.href = "/";
    } catch (error) {
      console.error("‚ùå useAuth: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      clearUser();
      console.log("üè† useAuth: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏)");
      window.location.href = "/";
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const checkAuthState = () => {
    console.log("üîß useAuth: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
    refetch();
  };

  // –û—à–∏–±–∫–∏
  const error =
    queryError?.message ||
    loginMutation.error?.message ||
    logoutMutation.error?.message ||
    registerMutation.error?.message ||
    updateUserMutation.error?.message ||
    null;

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user: userWithId,
    loading,
    error,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    isAuthenticated,
    isNotActivated,
    userRole: user?.role || null,

    // –ú–µ—Ç–æ–¥—ã
    login,
    register,
    updateUser: updateUserData,
    logout,
    checkAuthState,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    clearError: () => {
      console.log("üîß useAuth: –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫");
    },
  };
}
